#!/usr/bin/env python
"""
Run the script from the command line with:
    python /Users/morgan/Documents/GitHub/COMP2271/exploration.py --input_dir=/Users/morgan/Documents/GitHub/COMP2271/driving_images --output_dir=/Users/morgan/Documents/GitHub/COMP2271/Output_images

This script processes all valid images in the specified input directory using a wavelet‚Äêbased denoising algorithm.
The goal is to remove multicolored salt-and-pepper noise while preserving edges and details for ML classification.
Each color channel is denoised separately using soft thresholding on its wavelet coefficients, and the results are saved to the output directory.
"""

import os
import cv2
import numpy as np
import argparse
import pywt  # PyWavelets for wavelet transforms

def wavelet_denoise_channel(channel, wavelet='db1', level=None):
    """
    Denoises a single channel (2D array) using wavelet thresholding.
    
    Parameters:
      channel : 2D NumPy array representing one color channel.
      wavelet : Wavelet type to use (default 'db1').
      level   : Decomposition level (if None, it is determined automatically).
    
    Returns:
      Denoised channel as a 2D NumPy array with the same dtype as input.
    """
    # Convert channel to float for processing
    channel = channel.astype(np.float32)
    
    # Perform 2D wavelet decomposition
    coeffs = pywt.wavedec2(channel, wavelet, level=level)
    
    # Estimate noise sigma using the detail coefficients at the highest level (typically from the diagonal detail)
    # coeffs[-1] is a tuple of (cH, cV, cD)
    cH, cV, cD = coeffs[-1]
    sigma_est = np.median(np.abs(cD)) / 0.6745
    
    # Compute the universal threshold for this channel
    uthresh = sigma_est * np.sqrt(2 * np.log(channel.size))
    
    # Threshold detail coefficients with soft thresholding
    new_coeffs = [coeffs[0]]  # approximation coefficients are kept as is
    for detail_level in coeffs[1:]:
        new_detail = tuple(pywt.threshold(d, uthresh, mode='soft') for d in detail_level)
        new_coeffs.append(new_detail)
    
    # Reconstruct the denoised channel
    denoised_channel = pywt.waverec2(new_coeffs, wavelet)
    # Clip values to valid range and convert to original data type
    denoised_channel = np.clip(denoised_channel, 0, 255)
    return denoised_channel.astype(np.uint8)

def wavelet_denoise_color(image, wavelet='db1'):
    """
    Applies wavelet-based denoising to a color image by processing each channel independently.
    
    Parameters:
      image   : Input color image (BGR) as a NumPy array.
      wavelet : Wavelet type to use (default 'db1').
    
    Returns:
      Denoised color image (BGR) as a NumPy array.
    """
    channels = cv2.split(image)
    denoised_channels = []
    for ch in channels:
        denoised_channels.append(wavelet_denoise_channel(ch, wavelet=wavelet))
    return cv2.merge(denoised_channels)

def load_image(filename):
    """
    Loads an image using OpenCV.
    
    Returns:
      Image in BGR format or None if loading fails.
    """
    return cv2.imread(filename)

def process_all_images(input_dir, output_dir):
    """
    Processes all valid images in the input directory using wavelet-based denoising
    and saves the denoised images to the output directory.
    
    Parameters:
      input_dir  : Path to the directory containing input images.
      output_dir : Path to the directory where processed images will be saved.
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    image_files = [f for f in os.listdir(input_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    if not image_files:
        print("No valid images found in the specified directory.")
        return
    
    failed_images = []
    
    for filename in image_files:
        img_path = os.path.join(input_dir, filename)
        image = load_image(img_path)
        if image is None:
            print(f"Warning: Could not load {filename}.")
            failed_images.append(filename)
            continue
        
        try:
            denoised = wavelet_denoise_color(image, wavelet='db1')
            output_path = os.path.join(output_dir, filename)
            cv2.imwrite(output_path, denoised)
            print(f"Processed {filename} saved to {output_path}.")
        except Exception as e:
            print(f"Error processing {filename}: {e}")
            failed_images.append(filename)
    
    if failed_images:
        print("\nThe following images failed to be processed:")
        for f in failed_images:
            print(f"  - {f}")
    else:
        print("\nAll images were processed successfully.")

def main(input_dir, output_dir):
    process_all_images(input_dir, output_dir)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Apply wavelet-based denoising to remove multicolored salt-and-pepper noise while preserving details for ML classification. Process all images in the input directory and save results to the output directory."
    )
    parser.add_argument("--input_dir", type=str, required=True,
                        help="Path to the input directory containing images.")
    parser.add_argument("--output_dir", type=str, required=True,
                        help="Path to the output directory where processed images will be saved.")
    args = parser.parse_args()
    main(args.input_dir, args.output_dir)